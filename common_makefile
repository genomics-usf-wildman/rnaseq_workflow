#!/usr/bin/make -f

SHELL=/bin/bash

-include project.mk

# this is the env variable to tell us how many processors on this node
# we get
ifdef PBS_NUM_PPN
CORES=$(PBS_NUM_PPN)
else
CORES=8
endif

### module is how the biocluster loads specific versions; if we're not
### running there, we'll assume the correct version is installed and
### just echo what we're loading
ifdef MODULEPATH
MODULE=module
else
MODULE=echo
endif

SPECIES?=homo_sapiens
ALIGNMENT_SPECIES?=$(SPECIES)

REFERENCE_DIR?=
ENSEMBL_RELEASE?=89
ENSEMBL_SPECIES?=Homo_sapiens
ENSEMBL_GENOME?=GRCh38
GTF?=$(REFERENCE_DIR)$(ENSEMBL_SPECIES).$(ENSEMBL_GENOME).$(ENSEMBL_RELEASE).gtf
FASTA?=$(REFERENCE_DIR)$(ENSEMBL_SPECIES).$(ENSEMBL_GENOME).dna.toplevel.fa
CDNA_FASTA?=$(REFERENCE_DIR)$(ENSEMBL_SPECIES).$(ENSEMBL_GENOME).cdna.all.fa
NCRNA_FASTA?=$(REFERENCE_DIR)$(ENSEMBL_SPECIES).$(ENSEMBL_GENOME).ncrna.fa
### in some cases, cufflinks can't handle a "real" GTF, and needs a
### modified one. Write the rule to make the modified GTF and then set
### CUFFLINKS_GTF in that case.
CUFFLINKS_GTF?=$(GTF)

STAR_INDEX_DIR?=$(REFERENCE_DIR)$(SPECIES)_star/

REMOTE_FILES=$(FASTA).gz $(GTF).gz $(CDNA_FASTA).gz $(NCRNA_FASTA).gz


TRIMMED_FASTQ_FILES=$(patsubst %.fastq.gz,%_trimmed.fastq.gz,$(FASTQ_FILES))

UNTRIMMED_FASTQC_ANALYSIS_FILES=$(patsubst %.fastq.gz,%_fastqc.html,$(FASTQ_FILES))

TRIMMED_FASTQC_ANALYSIS_FILES=$(patsubst %.fastq.gz,%_fastqc.html,$(TRIMMED_FASTQ_FILES))

FASTQC_ANALYSIS_FILES=$(UNTRIMMED_FASTQC_ANALYSIS_FILES) $(TRIMMED_FASTQC_ANALYSIS_FILES)

ifdef USE_TRINITY
PROTEIN_ALIGNMENT_SPECIES?=$(ALIGNMENT_SPECIES)
PROTEIN_ALIGNMENT_FASTA?=$(patsubst %.dna.toplevel.fa,%.pep.all.fa,$(FASTA))
REMOTE_FILES:=$(REMOTE_FILES) $(PROTEIN_ALIGNMENT_FASTA)

CUFFLINKS_OPTIONS?=--max-bundle-frags=400000000 \
		--min-frags-per-transfrag 2 \
		--max-multiread-fraction 0.99
endif

ifeq ($(NREADS),1)
FPKM_GENES_ANALYSIS_FILES?=$(patsubst %.fastq.gz,%_genes.fpkm_tracking,$(FASTQ_FILES))
STAR_ALIGNMENT_FILES?=$(patsubst %.fastq.gz,%_star.bam,$(FASTQ_FILES))
else
FPKM_GENES_ANALYSIS_FILES?=$(patsubst %_1.fastq.gz,%_genes.fpkm_tracking,$(filter %_1.fastq.gz,$(FASTQ_FILES)))
STAR_ALIGNMENT_FILES?=$(patsubst %_1.fastq.gz,%_star.bam,$(filter %_1.fastq.gz,$(FASTQ_FILES)))
endif

CUFFLINKS_OPTIONS?=--max-bundle-frags=400000000

# we need to use a comma in a rule below, so this handles that
# escaping
comma:=,
empty:=
space:= $(empty) $(empty)

# default rule
.DEFAULT:=all
all: call

# these rules are the rules that you might want to call separately
call: $(FPKM_GENES_ANALYSIS_FILES)

fastqc: $(FASTQC_ANALYSIS_FILES)

untrimmed-fastqc: $(UNTRIMMED_FASTQC_ANALYSIS_FILES)

trimmed-fastqc: $(TRIMMED_FASTQC_ANALYSIS_FILES)

alignment: $(STAR_ALIGNMENT_FILES)

star_indexes: $(STAR_INDEX_DIR)/SA

trim: $(TRIMMED_FASTQ_FILES)

remote_files: $(REMOTE_FILES)

fasta: $(FASTA)

gtf: $(GTF)

# these rules use dqsub to submit jobs
DQSUB?=~/uiuc_igb_scripts/dqsub

submit_trim:
	echo $(TRIMMED_FASTQ_FILES) | sed 's/ /\n/g' | \
		$(DQSUB) --mem 24G --ppn 2 --array xargs make

submit_fastqc:
	echo $(UNTRIMMED_FASTQC_ANALYSIS_FILES) | sed 's/ /\n/g' | \
		$(DQSUB) --mem 24G --ppn 2 --array xargs make

submit_trimmed_fastqc:
	echo $(TRIMMED_FASTQC_ANALYSIS_FILES) | sed 's/ /\n/g' | \
		$(DQSUB) --mem 24G --ppn 2 --array xargs make

submit_star_indexes:
	$(DQSUB) --mem 240G --ppn 24 make star_indexes

submit_alignment:
	echo $(STAR_ALIGNMENT_FILES) | sed 's/ /\n/g' | \
		$(DQSUB) --mem 300G --ppn 24 --array xargs make

submit_call:
	echo $(FPKM_GENES_ANALYSIS_FILES) | sed 's/ /\n/g' | \
		$(DQSUB) --mem 40G --ppn 4 --array xargs make

# Kallisto submission rules
submit_kallisto_index:
	$(DQSUB) --mem 40G --ppn 1 make kallisto_index

submit_kallisto_call:
	echo $(KALLISTO_ANALYSIS_FILES) | sed 's/ /\n/g' | \
		$(DQSUB) --mem 40G --ppn 8 --array xargs make

# bigwig rules
submit_bigwig:
	echo $(STAR_ALIGNMENT_FILES) | sed 's/.bam /.bw\n/g' | \
		$(DQSUB) --mem 120G --ppn 8 --array xargs make

ifdef USE_TRINITY
%_genes.fpkm_tracking %_isoforms.fpkm_tracking %_skipped.gtf %_transcripts.gtf: %_star.bam
	mkdir -p $(*)_cufflinks;
	$(MODULE) load cufflinks/2.2.1; \
	cufflinks -o $(*)_cufflinks $(CUFFLINKS_OPTIONS) \
		-p $(CORES) $<
	for file in genes.fpkm_tracking isoforms.fpkm_tracking skipped.gtf transcripts.gtf; do \
		mv $(*)_cufflinks/$${file} $(*)_$${file}; \
	done;
	rm $(*)_cufflinks -rf;
else
%_genes.fpkm_tracking %_isoforms.fpkm_tracking %_skipped.gtf %_transcripts.gtf: %_star.bam \
	$(CUFFLINKS_GTF)
	mkdir -p $(*)_cufflinks;
	$(MODULE) load cufflinks/2.2.1; \
	cufflinks -o $(*)_cufflinks $(CUFFLINKS_OPTIONS) -p $(CORES) -G $(wordlist 2,2,$^) $<
	for file in genes.fpkm_tracking isoforms.fpkm_tracking skipped.gtf transcripts.gtf; do \
		mv $(*)_cufflinks/$${file} $(*)_$${file}; \
	done;
	rm $(*)_cufflinks -rf;
endif

$(FASTQC_ANALYSIS_FILES): %_fastqc.html: %.fastq.gz
	$(MODULE) load fastqc/0.11.2; \
	fastqc -t $(CORES) $<

ifdef USE_TRINITY
GENOME_FASTA=$(SPECIES)_trinity.Trinity.fasta
STAR_INDEX_OPTIONS?=--genomeChrBinNbits 9
STAR_INDEX_DEPS=$(GENOME_FASTA)
else
GENOME_FASTA=$(FASTA)
STAR_INDEX_DEPS=$(GENOME_FASTA) $(GTF)
STAR_INDEX_OPTIONS?=--sjdbGTFfile $(GTF)
endif

# use 150G, which is echo $((1024*1024*1024*150))
STAR_INDEX_MEMORY_LIMIT?=161061273600

$(STAR_INDEX_DIR)/SA: $(STAR_INDEX_DEPS)
	$(MODULE) load STAR; \
	mkdir -p $(STAR_INDEX_DIR); \
	STAR --genomeFastaFiles  $(GENOME_FASTA) \
		--runMode genomeGenerate \
		$(STAR_INDEX_OPTIONS) \
		--limitGenomeGenerateRAM $(STAR_INDEX_MEMORY_LIMIT) \
		--runThreadN $(CORES) \
		--genomeDir $(STAR_INDEX_DIR)

ifdef USE_TRINITY
STAR_ALIGN_DEPS=$(STAR_INDEX_DIR)/SA
STAR_OPTIONS?=
else
STAR_ALIGN_DEPS=$(STAR_INDEX_DIR)/SA $(GTF)
STAR_OPTIONS?=--sjdbGTFfile $(GTF) --quantMode GeneCounts
endif

GZIP=$(shell which pigz || which gzip)

ifeq ($(NREADS),1)
%_star.bam: %_trimmed.fastq.gz $(STAR_ALIGN_DEPS)
else
%_star.bam: %_1_trimmed.fastq.gz %_2_trimmed.fastq.gz $(STAR_ALIGN_DEPS)
endif
	$(MODULE) load STAR; \
	mkdir -p $(*)_star; \
	STAR --outFileNamePrefix $(*)_star/ \
		--outSAMtype BAM SortedByCoordinate \
		--runThreadN $(CORES) \
        --outSAMstrandField intronMotif \
		--genomeDir $(STAR_INDEX_DIR) \
		$(STAR_OPTIONS) \
		--readFilesCommand "$(GZIP) -dc" \
		--readFilesIn $(if $(filter-out $(NREADS),2),$(wordlist 1,1,$^),$(wordlist 1,1,$^)$(comma)$(wordlist 2,2,$^))
	ln $(*)_star/Aligned.sortedByCoord.out.bam $@ -sf

# This is the directory where the trimmomatic adapters are kept
ifdef MODULEPATH
TRIMMOMATIC_FASTA_PATH?=/home/apps/trimmomatic/trimmomatic-0.33/adapters
TRIMMOMATIC_PE=java org.usadellab.trimmomatic.TrimmomaticPE
TRIMMOMATIC_SE=java org.usadellab.trimmomatic.TrimmomaticSE
else
TRIMMOMATIC_PE=TrimmomaticPE
TRIMMOMATIC_SE=TrimmomaticSE
TRIMMOMATIC_FASTA_PATH?=/usr/share/trimmomatic
endif

## set the clip options for trimmomatic
TRIMMOMATIC_OPTIONS?=ILLUMINACLIP:$(TRIMMOMATIC_FASTA_PATH)/TruSeq2-SE.fa:2:20:10
TRIMMOMATIC_QUALITY?=

ifeq ($(NREADS),1)
ifdef NOTRIM
$(TRIMMED_FASTQ_FILES): %_trimmed.fastq.gz: %.fastq.gz
	cp -l $< $@
else
$(TRIMMED_FASTQ_FILES): %_trimmed.fastq.gz: %.fastq.gz
	$(MODULE) load trimmomatic; \
	$(TRIMMOMATIC_SE) \
		-threads $(CORES) \
		$(TRIMMOMATIC_QUALITY) \
		$< $@ \
		$(TRIMMOMATIC_OPTIONS);
endif
else
ifdef NOTRIM
%_1_trimmed.fastq.gz %_2_trimmed.fastq.gz: %_1.fastq.gz %_2.fastq.gz
	cp -l $(wordlist 1,1,$^) $(*)_1_trimmed.fastq.gz
	cp -l $(wordlist 2,2,$^) $(*)_2_trimmed.fastq.gz
else
%_1_trimmed.fastq.gz %_2_trimmed.fastq.gz: %_1.fastq.gz %_2.fastq.gz
	$(MODULE) load trimmomatic; \
	$(TRIMMOMATIC_PE) \
		-threads $(CORES) \
		$(TRIMMOMATIC_QUALITY) \
		$(wordlist 1,1,$^) $(wordlist 2,2,$^) \
		$(*)_1_trimmed.fastq.gz /dev/null \
		$(*)_2_trimmed.fastq.gz /dev/null \
		$(TRIMMOMATIC_OPTIONS);
endif
endif

ifdef USE_TRINITY
trinity: $(SPECIES)_trinity.Trinity.fasta

TRINITY_OPTIONS?=--max_memory 20G
ifeq ($(NREADS),1)
TRINITY_FASTQ_ARGUMENTS=--single $(subst $(space),$(comma),$(strip $(TRIMMED_FASTQ_FILES)))
else
TRINITY_FASTQ_ARGUMENTS= --left $(subst $(space),$(comma),$(strip $(filter %_1_trimmed.fastq.gz,$(TRIMMED_FASTQ_FILES)))) --right $(subst $(space),$(comma),$(strip $(filter %_2_trimmed.fastq.gz,$(TRIMMED_FASTQ_FILES))))
endif

$(SPECIES)_trinity.Trinity.fasta: $(TRIMMED_FASTQ_FILES)
	$(MODULE) load samtools/0.1.19; \
	$(MODULE) load trinityrnaseq/2.2.0; \
	Trinity --seqType fq \
	$(TRINITY_FASTQ_ARGUMENTS) \
	--CPU $(CORES) --output $(SPECIES)_trinity \
	$(TRINITY_OPTIONS)
	mv $(SPECIES)_trinity/Trinity.fasta $@


$(PROTEIN_ALIGNMENT_SPECIES)_diamond.dmnd: $(PROTEIN_ALIGNMENT_FASTA)
	$(MODULE) load diamond/0.7.9 ; \
	diamond makedb --threads $(CORES) \
		--in $(PROTEIN_ALIGNMENT_FASTA) \
		--db $(PROTEIN_ALIGNMENT_SPECIES)_diamond;

$(PROTEIN_ALIGNMENT_SPECIES)_diamond.dmnd: $(PROTEIN_ALIGNMENT_FASTA)
	$(MODULE) load diamond/0.7.9 ; \
	diamond makedb --threads $(CORES) \
		--in $(PROTEIN_ALIGNMENT_FASTA) \
		--db $(PROTEIN_ALIGNMENT_SPECIES)_diamond;


$(SPECIES)_trinity_diamond.daa: $(SPECIES)_trinity.Trinity.fasta \
	$(PROTEIN_ALIGNMENT_SPECIES)_diamond.dmnd
	$(MODULE) load diamond/0.7.9 ; \
	diamond blastx --db $(PROTEIN_ALIGNMENT_SPECIES)_diamond \
		--threads $(CORES) \
		--query $(SPECIES)_trinity.Trinity.fasta \
        --daa $(SPECIES)_trinity_diamond

diamond: $(SPECIES)_trinity_diamond.txt

$(SPECIES)_trinity_diamond.txt: $(SPECIES)_trinity_diamond.daa
	$(MODULE) load diamond/0.7.9 ; \
	diamond view --threads $(CORES) --daa $< > $@

$(PROTEIN_ALIGNMENT_FASTA).gz:
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-$(ENSEMBL_RELEASE)/fasta/$(PROTEIN_ALIGNMENT_SPECIES)/pep/$(PROTEIN_ALIGNMENT_FASTA).gz" $@

$(PROTEIN_ALIGNMENT_FASTA): $(PROTEIN_ALIGNMENT_FASTA).gz
	$(GZIP) -dc $< > $@
endif

### Kallisto rules

### Kallisto indexes

KALLISTO_INDEX?=$(REFERENCE_DIR)$(ALIGNMENT_SPECIES)_kallisto.idx
KALLISTO_INDEX_INFO?=$(REFERENCE_DIR)$(ALIGNMENT_SPECIES)_kallisto_info.txt
kallisto_index: $(KALLISTO_INDEX) $(KALLISTO_INDEX_INFO)

$(KALLISTO_INDEX): $(CDNA_FASTA).gz $(NCRNA_FASTA).gz
	$(MODULE) load kallisto ; \
	kallisto index --index $@ $(CDNA_FASTA).gz $(NCRNA_FASTA).gz

$(KALLISTO_INDEX_INFO): $(CDNA_FASTA).gz $(NCRNA_FASTA).gz
	gzip -dc $^|grep '^>'|sed 's/^>//' > $@

### Kalliso per-sample information
ifeq ($(NREADS),1)
KALLISTO_ANALYSIS_FILES?=$(patsubst %.fastq.gz,%_kallisto.txt,$(FASTQ_FILES))
KALLISTO_QUANT_ARGS?=--single --bias --bootstrap-samples=200
else
KALLISTO_ANALYSIS_FILES?=$(patsubst %_1.fastq.gz,%_kallisto.txt,$(filter %_1.fastq.gz,$(FASTQ_FILES)))
KALLISTO_QUANT_ARGS?=--fr-stranded --bias --bootstrap-samples=200
endif

kallisto_call: $(KALLISTO_ANALYSIS_FILES)

ifeq ($(NREADS),1)
$(KALLISTO_ANALYSIS_FILES): %_kallisto.txt: %_trimmed.fastq.gz $(KALLISTO_INDEX)
else
$(KALLISTO_ANALYSIS_FILES): %_kallisto.txt: %_1_trimmed.fastq.gz %_2_trimmed.fastq.gz $(KALLISTO_INDEX)
endif
	$(MODULE) load kallisto ; \
	kallisto quant --index $(KALLISTO_INDEX) \
		--threads $(CORES) \
		--output-dir $*_kallisto \
		$(KALLISTO_QUANT_ARGS) \
		$(if $(filter 1,$(NREADS)),$<,$(wordlist 1,2,$^));
	ln -sf $*_kallisto/abundance.tsv $@;


## this rule generates bam indexes in case you need to subset the bam
%.bam.bai: %.bam
	$(MODULE) load samtools; \
	samtools index $<

## this rule generates bigwig coverage files from bams (in case you need them)
BAM_COVERAGE_OPTIONS?=--skipNAs --binSize 200
%.bw: %.bam %.bam.bai
	$(MODULE) load deepTools; \
	bamCoverage -p $(CORES) $(BAM_COVERAGE_OPTIONS) --bam $< --outFileName $@ --outFileFormat bigwig

$(GTF): $(GTF).gz
	$(GZIP) -dc $< > $@

ifdef STRIP_PATCHES
STRIP_PATCHES_SCRIPT?=./rnaseq_workflow/strip_patches.pl
STRIP_PATCHES_OPTIONS?=--valid-chr=.
$(FASTA): $(FASTA).gz $(GTF) $(STRIP_PATCHES_SCRIPT)
	$(MODULE) load perl; \
	$(STRIP_PATCHES_SCRIPT) \
		--fasta <($(GZIP) -dc $(FASTA).gz) \
		--fasta-out $(FASTA) \
		--gtf $(GTF) \
		$(STRIP_PATCHES_OPTIONS)
else
$(FASTA): $(FASTA).gz
	$(GZIP) -dc $< > $@

endif

$(FASTA).gz:
	mkdir -p $(dir $@)
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-$(ENSEMBL_RELEASE)/fasta/$(ALIGNMENT_SPECIES)/dna/$(notdir $(FASTA)).gz" $@

$(GTF).gz:
	mkdir -p $(dir $@)
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-$(ENSEMBL_RELEASE)/gtf/$(ALIGNMENT_SPECIES)/$(notdir $(GTF)).gz" $@

$(CDNA_FASTA).gz:
	mkdir -p $(dir $@)
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-$(ENSEMBL_RELEASE)/fasta/$(ALIGNMENT_SPECIES)/cdna/$(notdir $(CDNA_FASTA)).gz" $@

$(NCRNA_FASTA).gz:
	mkdir -p $(dir $@)
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-$(ENSEMBL_RELEASE)/fasta/$(ALIGNMENT_SPECIES)/ncrna/$(notdir $(NCRNA_FASTA)).gz" $@

## this file contains a variable that describes how to connect to the
## cluster host where I ran the analyses and will retreive them onto
## the local host for analysis
-include cluster_host.mk

get_results:
	rsync -avmP \
		--include '**_genes.fpkm_tracking' \
		--include '**_isoforms.fpkm_tracking' \
		--include '**_star/Log.final.out' \
		--include '**_star/ReadsPerGene.out.tab' \
		--include '**_star/*.bg' \
		--include '**_star.bw' \
		--include '**_kallisto/abundance.tsv' \
		--include '**_kallisto/run_info.json' \
		--include '**_kallisto.txt' \
        --include '**_kallisto_info.txt' \
		--include '**trinity_diamond.txt' \
		--include '**_trinity_align_rsem_isoforms.txt' \
        --include '**_fastqc.html' \
        --include '**_fastqc.zip' \
        --include '**/' \
	    --exclude '**' \
		$(CLUSTER_HOST)/ .;

